Modifications:
===============
> basic enhancements
  - more information on menu: what does a point show, what to expect
  - ability to repeatly use menu 20 "find min/max" the need to reboot
  - more consistent menu navigation
  - moved some variables from global scope into the using function (setting them static)
      to clarify things

> the idea of storing config-data into EEPROM of the Arduino-controller:
  - transferring constants of config.h to a parameter-struct
  - saving/loading parameter to/from EEPROM

> extend the menu with a parameter-menu to edit/load/save the parameters
  - new menu-levels (menu 30 and subs)
  - now all non-hardware-specific parameters can be edited and stored:
    - 4.calibration (sensitivity), 5. (modifierFuction), 6. (direction, drift comp., exclusive)

> rebuilt modifierFunction to
  - be more flexible in form of the function (look at new spreadsheet)
  - get a function that fills the range from 0/0 to 350/350 without truncations
  - minimize deadzones for resistive- and hall-JOYSTICKS

> restrict rotation-components when doing a transZ-move to get rid of "ghost movements"
  - helps when using resistive joysticks, enabled by existing EXCLUSIVE-mode
  - (I had implemented some other "tricks" but the exclusive-mode seems to
     make them unnessecary, so I left them in my old code)

> implemented a drift-compensation to re-zero the (hall-)joysticks when SpaceMouse is untouched
  - because hall-joystick-readings itself don't show any deadband (resistive joysticks do!),
      I wanted use the small readings possible around zero to get a precise reaction to slight touches.
      This can be done by setting the DEADBAND to 0 and tune the modifierFunction to put out values
      even at small joystick-readings.
      But then I did that, it can be seen that the mechanics produces a new random zeropoint everytime
      the SpaceMouse is left untouched.
      So this drift-compensation was invented to overcome the slightly unprecise mechanics.
  - the compensation finds out when the SpaceMouse is untouched. Then it sets the readings of the joysticks to 0.

> my hall-effect SpaceMouse will be built over the next weeks. Then I may come up with some modifications
    to the HALLEFFECT-code




Mods in more detail:
=====================

kinematics.cpp
===============
> _calculateKinematicSensors: detect a Z-(up/down-)movement to mask out rotational artefacts
    - only on exclusive-mode
> modifierFunction enhanced
    - no "deadzones" at maximum (at 350) because of truncated values, all curves end for x=350 at y=350
    - finer trimmable exponential-function, not only x^2, x^3 -> also broken exponents x^a (example x^2.35) are possible

  Principles
  -----------
    1.  first x is normalized, so it runs from -1.0 ... 0 ... +1.0
    2.  to get rid of sign-problems in the "curve-functions", xn=abs(x) is used to get only positive values xn= +1.0 ... 0 ... +1.0
    3.  to get the negative values back, the sign sx=sign(x) is multiplied at the right places
    4a. any exponential function y=(xn^a)*sx (with a=1.0 ... 3.0) with x in 0.0..+1.0 results in a y of 0.0 ... +1.0
    4b. a tangent function y=tan(b*(xn*sn)) / tan(b) with x in -1.0 ... +1.0 results in a y of -1.0 ... +1.0 when b < pi/2
    5.  so the tangent() of our exponential() function also results in a y of -1.0 ... +1.0
    6.  after denormalizing we get a result of -350 ... +350 with the curve always fitting into the used x-/y-range
    7.  on the new modifierFunctions.ods you can play around with the function by editing the yellow fields for "a" and "b"

calibration.cpp
================
> calcMinMax: no need to reset/reboot after use, you can now rerun it without reboot

> compensateDrifts: new zeropoint drift-compensation for the centered values

spacemouse-keys.cpp, parameterMenu.cpp
=======================================
> multi-level / nonblocking menu system
  - non-blocking, you can operate the SpaceMouse while tuning parameters in the menu!
  Usage
  ------
    - all inputs are done by typing a number and press <enter>. To input floating point-values <-><.> are allowed.
    - to abort a numerical input, press <esc>, <q> or another non-numerical char
    - to select a menu/debug-mode, input its number
    - to leave a running debug-mode press <space>, <esc> or <q>
    - the active menu-level is shown by its prompt, example "mode::"
    - to leave a menu-level press <space>, <esc> or <q>
    - a typed in value will be shown AFTER <enter> is pressed

> added menu for parametrisation of SpaceMouse

> moved interesting system-parameters from the #define's of config.h to a struct "ParamStorage" so they can be:
    - editied "on the fly" via menu
    - saved to EEPROM on Arduino / retrieved on restart from there

> storage of parameters in EEPROM
  !!! CAUTION: the EEPROM-chip on the Arduino is capable of 10.000 writes per storage-byte. By manually editing and
               storing the modified parameters we won't get in trouble - but frequent automated saving of parameters
               won't be a good idea, the EEPROM may get damaged.
               The parameters will be stored to the same location all the time - a load-leveling-algorithm would be
               too much code for too less benefit. The Arduino-function EEPROM.put() itself only writes bytes,
               that really have changed - so only changed values wear out EEPROM-bytes, unchanged parts don't.
             
  Principles
  -----------
    1. set up a struct "ParamStorage" to hold the former constant values of config.h
       > the struct is initialized by the constants of config.h
    2. defined a variable "par" in "spacemouse-keys.ino"
    3. used the new function "getParametersFromEEPROM()" in setup() to fill in values from EEPROM
       > only done, if they are are stored there (test by magicNumber)
    4. passed "par" to all underlying functions of loop() that are using parameters
    5. saving "par" to EEPROM with the new function putParametersToEEPROM() sets the magicNumber valid,
       so on the next boot the parameters will be read from EEPROM instead of using the (initializing) constants
    6. editing and saving the parameters is done by the new submenu "30 parameters"

  Usage
  ------
    1. initially the parameters hold the #defined values from config.h
    2. with the new parameter-menu "edit parameters" you can edit them - they go to the struct par in RAM
    3. you can test the modified parameters immediatly without leaving the parameter-menu
    4. a) if you switch off/reset the SpaceMouse, the parameters are lost because they are only stored in RAM
       b) in the parameter-menu you can save the parameters to EEPROM on the Arduino,
          use menu "write to EEPROM" - from now this parameters survive restarts
    5. as a backup you can list all parameters with then menu "list parameters as defines", you get a list of #defines
       that you can copy/paste from your terminal-program to a textfile (for storage/documentation) or into your
       config.h-file to set them as new initial values
    5. on restart of the SpaceMouse the parameters will be automatically read from EEPROM if they are flagged as valid.
       They are considered as valid if a correct magicNumber is stored in the EEPROM.
    6. a) if the parameters are destroyed (why?) or the struct had changed (by modifying the program itself),
          you can invalidate the stored parameters via menu "set EEPROM params invalid" (kills the magicNumber)
       b) as an alternative you can erase the whole EEPROM with "clear EEPROM to 0xFF"
    7. on the next restart the parameters are only filled with the #defined values from config.h

  Modification
  -------------
    is described in the header of parameterMenu.h
